get openjdkX source code
sudo apt install mercurial

hg clone http://hg.openjdk.java.net/jdk8u/jdk8u jdk8u
cd jdk8u && sh ./get_source.sh

hg clone http://hg.openjdk.java.net/jdk9/jdk9/
hg clone http://hg.openjdk.java.net/jdk/jdk10/
hg clone http://hg.openjdk.java.net/jdk/jdk11/
hg clone http://hg.openjdk.java.net/jdk-updates/jdk9u jdk9u
hg clone http://hg.openjdk.java.net/jdk-updates/jdk10u/ jdk10u
hg clone http://hg.openjdk.java.net/jdk/jdk/ jdk-master

build openjdk8u (JDK 8 Updates Master - 20180902)
-------------------------------------------------
0) os - ubuntu16.04.3
In VM VirtualBox Manager
->General->Advanced->Shared Clipboard:Bidirectional
                 ->Drag'n'Drop:Bidirectional
->Shared Folders

In vm
Devices -> Insert Guest Additions CD Image...
sudo mount -t vboxsf share /home/zbhuang/share

1) jdk8.151
update /etc/profile

2) download apache ant and update /etc/profile

3) install the following components
sudo apt-get install ant (this install is very expensive, that is why install it by yourself)

sudo apt-get install gawk
sudo apt-get install libfreetype6 libfreetype6-dev

sudo apt-get install libcups2-dev
sudo apt-get install libasound2-dev

sudo apt-get install libx11-dev
sudo apt-get install libxt-dev
sudo apt-get install libxtst-dev
sudo apt-get install libxrender-dev

sudo apt-get install ccache

4) build (different from OpenJDK7)
bash ./configure --with-debug-level=slowdebug --disable-zip-debug-info --with-target-bits=64
make
Note: "--disable-zip-debug-info" is needed, otherwise, hotspot module can't be debugged in.

5) verify the build
zbhuang@zbhuang-VirtualBox:~/OpenJDK/jdk8u$ ./build/linux-x86_64-normal-server-slowdebug/jdk/bin/java -version
openjdk version "1.8.0-internal-debug"
OpenJDK Runtime Environment (build 1.8.0-internal-debug-zbhuang_2018_01_01_15_21-b00)
OpenJDK 64-Bit Server VM (build 25.71-b00-debug, mixed mode)

zbhuang@zbhuang-VirtualBox:~/OpenJDK$ /home/zbhuang/OpenJDK/jdk8u02/build/linux-x86_64-normal-server-slowdebug/jdk/bin/javac Hello.java 
zbhuang@zbhuang-VirtualBox:~/OpenJDK$ /home/zbhuang/OpenJDK/jdk8u02/build/linux-x86_64-normal-server-slowdebug/jdk/bin/java Hello
hello world!
zbhuang@zbhuang-VirtualBox:~/OpenJDK$ gdb --args /home/zbhuang/OpenJDK/jdk8u/build/linux-x86_64-normal-server-slowdebug/jdk/bin/java Hello 
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /home/zbhuang/OpenJDK/jdk8u/build/linux-x86_64-normal-server-slowdebug/jdk/bin/java...done.
(gdb) break init.cpp:95
No source file named init.cpp.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (init.cpp:95) pending.
(gdb) run
Starting program: /home/zbhuang/OpenJDK/jdk8u/build/linux-x86_64-normal-server-slowdebug/jdk/bin/java Hello
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[New Thread 0x7ffff7fdb700 (LWP 26764)]
[Switching to Thread 0x7ffff7fdb700 (LWP 26764)]

Thread 2 "java" hit Breakpoint 1, init_globals () at /home/zbhuang/OpenJDK/jdk8u/hotspot/src/share/vm/runtime/init.cpp:95
95	jint init_globals() {
(gdb) l
90	  chunkpool_init();
91	  perfMemory_init();
92	}
93	
94	
95	jint init_globals() {
96	  HandleMark hm;
97	  management_init();
98	  bytecodes_init();
99	  classLoader_init();
(gdb) c
Continuing.

Thread 2 "java" received signal SIGSEGV, Segmentation fault.
0x00007fffe10002b4 in ?? ()
(gdb) handle SIGSEGV noprint nostop pass
Signal        Stop	Print	Pass to program	Description
SIGSEGV       No	No	Yes		Segmentation fault
(gdb) c
Continuing.
[New Thread 0x7ffff423e700 (LWP 26767)]
[New Thread 0x7ffff413d700 (LWP 26768)]
[New Thread 0x7fffe0d65700 (LWP 26769)]
[New Thread 0x7fffe0c64700 (LWP 26770)]
[New Thread 0x7fffd2ff7700 (LWP 26771)]
[New Thread 0x7fffd2ef6700 (LWP 26772)]
[New Thread 0x7fffd2df5700 (LWP 26773)]
[New Thread 0x7fffd2335700 (LWP 26774)]
[New Thread 0x7fffd2234700 (LWP 26775)]
[New Thread 0x7fffd2133700 (LWP 26776)]
[New Thread 0x7fffd2032700 (LWP 26777)]
[New Thread 0x7fffd1f31700 (LWP 26778)]
[New Thread 0x7fffd1e30700 (LWP 26779)]
hello world!
[Thread 0x7fffd1e30700 (LWP 26779) exited]
[Thread 0x7fffd2335700 (LWP 26774) exited]
[Thread 0x7fffd2ff7700 (LWP 26771) exited]
[Thread 0x7fffd1f31700 (LWP 26778) exited]
[Thread 0x7fffd2032700 (LWP 26777) exited]
[Thread 0x7fffd2133700 (LWP 26776) exited]
[Thread 0x7fffd2234700 (LWP 26775) exited]
[Thread 0x7fffd2df5700 (LWP 26773) exited]
[Thread 0x7fffd2ef6700 (LWP 26772) exited]
[Thread 0x7fffe0c64700 (LWP 26770) exited]
[Thread 0x7fffe0d65700 (LWP 26769) exited]
[Thread 0x7ffff413d700 (LWP 26768) exited]
[Thread 0x7ffff423e700 (LWP 26767) exited]
[Thread 0x7ffff7fdb700 (LWP 26764) exited]
[Inferior 1 (process 26760) exited normally]
(gdb) quit
zbhuang@zbhuang-VirtualBox:~/OpenJDK$

build jdk9
----------
zbhuang@zbhuang-VirtualBox:~/OpenJDK/jdk9$ 
sudo apt-get install libelf-dev
bash ./configure --with-debug-level=slowdebug --with-target-bits=64 --with-native-debug-symbols=external
make

zbhuang@zbhuang-VirtualBox:~/OpenJDK/jdk9/build/linux-x86_64-normal-server-slowdebug/jdk/bin$ ./java -version
openjdk version "9-internal"
OpenJDK Runtime Environment (slowdebug build 9-internal+0-adhoc.zbhuang.jdk9)
OpenJDK 64-Bit Server VM (slowdebug build 9-internal+0-adhoc.zbhuang.jdk9, mixed mode)

Reference
1. Debugging OpenJDK 8 with NetBeans on Ubuntu
https://marcin-chwedczuk.github.io/debugging-openjdk8-with-netbeans-on-ubuntu
One part, how to run/debug HelloWorld", is not clear.
First, use javac to compile HelloWorld.java
Then, run java on HelloWorld
Third, put a breakpoint at jdk/src/share/native/java/io/io_util.c and debug

2. Build OpenJDK on CentOS 5/6
https://github.com/hgomez/obuildfactory/wiki/How-to-build-and-package-OpenJDK-8-on-Linux
sudo yum install git-core mercurial zip bzip2 unzip tar 
sudo yum install ccache make gcc gcc-c++ libstdc++-devel 
sudo yum install alsa-lib-devel cups-devel libX11-devel libXext-devel libXt-devel libXrender-devel libXtst-devel libXi-devel libjpeg-devel giflib-devel freetype-devel
sudo yum install curl rpm-build gpg
sudo yum install java-1.7.0-openjdk-devel

3. CentOS上编译OpenJDK8源码 以及 在eclipse上调试HotSpot虚拟机源码
http://blog.csdn.net/tjiyu/article/details/53725247

4. WINDOWS7平台下编译OpenJDK8和Visual Studio 单步调试HotSpot JVM
https://www.jianshu.com/p/e85f93cc74cb

5. Debugging native code with Hotspot and GDB
java -XX:OnError="gdb - %p" MyApplication
https://neugens.wordpress.com/2015/02/26/debugging-the-jdk-with-gdb/
https://rkennke.wordpress.com/2008/02/29/debugging-native-code-with-hotspot-and-gdb/