/home/zbhuang/OpenJDK/jdk8u/build/linux-x86_64-normal-server-slowdebug/jdk/lib/amd64/server/
unzip libjvm.diz (to have libjvm.debuginfo)

main.c
int main() main.c
  |
  |-- JLI_Launch() /jdk/src/share/bin/main.c
        |
        |-- LoadJavaVM() /jdk/src/share/bin/java.c
              |
              |-- dlopen(/home/zbhuang/OpenJDK/jdk8u02/build/linux-x86_64-normal-server-slowdebug/jdk/lib/amd64/server/libjvm.so)
              |
              |-- ifn->CreateJavaVM = (CreateJavaVM_t)dlsym(libjvm, "JNI_CreateJavaVM");
              |
              |-- ifn->GetDefaultJavaVMInitArgs = (GetDefaultJavaVMInitArgs_t)dlsym(libjvm, "JNI_GetDefaultJavaVMInitArgs");
              |
              |-- ifn->GetCreatedJavaVMs = (GetCreatedJavaVMs_t)dlsym(libjvm, "JNI_GetCreatedJavaVMs");
              |
              |-- JVMInit() /jdk/src/solaris/bin/java_md_solinux.c
                    |
                    |-- ContinueInNewThread() /jdk/src/share/bin/java.c
                          |
                          |-- ContinueInNewThread0(JavaMain, threadStackSize, (void*)&args) /jdk/src/solaris/bin/java_md_solinux.c
                                |
                                |-- pthread_create()
                                      |
                                      |-- JavaMain() /jdk/src/share/bin/java.c
                                            |
                                            |-- InitializeJVM(&vm, &env, &ifn)
                                            |     |
                                            |     |-- ifn->CreateJavaVM(pvm, (void **)penv, &args);
                                            |           |
                                            |           |-- JNI_CreateJavaVM() /hotspot/src/share/vm/prims/jni.cpp
                                            |                 |
                                            |                 |-- Threads::create_vm() /hotspot/src/share/vm/runtime/thread.cpp
                                            |                       |
                                            |                       |-- os::init() /hotspot/src/os/linux/vm/os_linux.cpp
                                            |                       |
                                            |                       |-- os::init_2()
                                            |                       |     |
                                            |                       |     |-- SR_initialize()
                                            |                       |     |
                                            |                       |     |-- JavaThread::set_stack_size_at_create(round_to(threadStackSizeInBytes,vm_page_size()));
                                            |                       |     |-- Linux::capture_initial_stack(JavaThread::stack_size_at_create());
                                            |                       |     |-- Linux::libpthread_init();
                                            |                       |     |
                                            |                       |     |-- prio_init() //initialize thread priority policy
                                            |                       |
                                            |                       |-- ThreadLocalStorage::init(); // intialize TLS
                                            |                       |
                                            |                       |-- vm_init_globals() // Initialize global data structures and create system classes in heap
                                            |                       |
                                            |                       |-- JavaThread* main_thread = new JavaThread(); // Attach the main thread to this os thread
                                            |                       |-- main_thread->set_thread_state(_thread_in_vm);
                                            |                       |-- main_thread->record_stack_base_and_size();
                                            |                       |-- main_thread->initialize_thread_local_storage();
                                            |                       |-- main_thread->set_active_handles(JNIHandleBlock::allocate_block());
                                            |                       |     |
                                            |                       |     |-- Thread::allocate()
                                            |                       |
                                            |                       |-- init_globals() /hotspot/src/share/vm/runtime/init.cpp
                                            |                       |     |
                                            |                       |     |-- management_init();
                                            |                       |     |
                                            |                       |     |-- bytecodes_init();
                                            |                       |     |
                                            |                       |     |-- classLoader_init();
                                            |                       |     |
                                            |                       |     |-- VM_Version_init() /hotspot/src/cpu/x86/vm/vm_version_x86.cpp
                                            |                       |     |     |
                                            |                       |     |     |-- VM_Version::initialize()
                                            |                       |     |           |
                                            |                       |     |           |-- VM_Version::get_processor_features()
                                            |                       |     |                 |
                                            |                       |     |                 |-- VM_Version::get_cpu_info_wrapper()
                                            |                       |     |                       |
                                            |                       |     |                       |-- Signal received: SIGSEGV (Segmentation fault)
                                            |                       |     |
                                            |                       |     |-- os_init_globals()
                                            |                       |     |
                                            |                       |     |-- stubRoutines_init1();
                                            |                       |     |     |
                                            |                       |     |     |-- StubRoutines::initialize1(); /hotspot/src/share/vm/runtime/stubRoutines.cpp
                                            |                       |     |           |
                                            |                       |     |           |-- StubGenerator_generate() /hotspot/src/cpu/x86/vm/stubGenerator_x86_64.cpp
                                            |                       |     |                 |
                                            |                       |     |                 |-- generate_initial()
                                            |                       |     |
                                            |                       |     |-- universe_init() /hotspot/src/share/vm/memory/universe.cpp
                                            |                       |     |     |
                                            |                       |     |     |-- Universe::initialize_heap();
                                            |                       |     |           |
                                            |                       |     |           |-- Universe::heap()->initialize();
                                            |                       |     |                 |
                                            |                       |     |                 |-- ParallelScavengeHeap::initialize() /hotspot/src/share/vm/gc_implementation/parallelScavenge/parallelScavengeHeap.cpp
                                            |                       |     |                       |
                                            |                       |     |                       |-- GCTaskManager::create(ParallelGCThreads); gcTaskManager.hpp
                                            |                       |     |                             |
                                            |                       |     |                             |-- os::create_thread()
                                            |                       |     |                             |        |
                                            |                       |     |                             |        |-- OSThread* osthread = new OSThread(NULL, NULL);
                                            |                       |     |                             |        |
                                            |                       |     |                             |        |-- pthread_attr_t attr;
                                            |                       |     |                             |        |-- pthread_attr_init(&attr);
                                            |                       |     |                             |        |-- pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
                                            |                       |     |                             |        |-- pthread_attr_setstacksize(&attr, stack_size);
                                            |                       |     |                             |        |-- int ret = pthread_create(&tid, &attr, (void* (*)(void*)) java_start, thread);
                                            |                       |     |                             |              |
                                            |                       |     |                             |              |-- void *java_start(Thread *thread) /hotspot/src/os/linux/vm/os_linux.cpp
                                            |                       |     |                             |                    |
                                            |                       |     |                             |                    |-- ThreadLocalStorage::set_thread(thread);
                                            |                       |     |                             |
                                            |                       |     |                             |-- os::start_thread
                                            |                       |     |                                   |
                                            |                       |     |                                   |-- pd_start_thread(thread); /hotspot/src/share/vm/runtime/os.cpp
                                            |                       |     |                                         |
                                            |                       |     |                                         |-- OSThread * osthread = thread->osthread();
                                            |                       |     |                                         |-- Monitor* sync_with_child = osthread->startThread_lock();
                                            |                       |     |                                         |-- sync_with_child->notify();
                                            |                       |     |
                                            |                       |     |-- invocationCounter_init();
                                            |                       |     |
                                            |                       |     |-- marksweep_init();
                                            |                       |     |
                                            |                       |     |-- universe2_init();
                                            |                       |     |
                                            |                       |     |-- jni_handles_init();
                                            |                       |
                                            |                       |-- VMThread::create();
                                            |                       |-- Thread* vmthread = VMThread::vm_thread();
                                            |                       |-- os::create_thread(vmthread, os::vm_thread)
                                            |                       |-- os::start_thread(vmthread);
                                            |                       |-- JvmtiExport::enter_start_phase();
                                            |                       |
                                            |                       |-- initialize_class(vmSymbols::java_lang_String(), CHECK_0);
                                            |                       |     |
                                            |                       |     |-- initialize_class(Symbol* class_name, TRAPS) thread.cpp
                                            |                       |
                                            |                       |-- initialize_class(vmSymbols::java_lang_System(), CHECK_0);
                                            |                       |
                                            |                       |-- initialize_class(vmSymbols::java_lang_Thread(), CHECK_0);
                                            |                       |
                                            |                       |-- initialize_class(vmSymbols::java_lang_Class(), CHECK_0);
                                            |                       |
                                            |                       |-- initialize_class(vmSymbols::java_lang_reflect_Method(), CHECK_0);
                                            |                       |
                                            |                       |-- initialize_class(vmSymbols::java_lang_ref_Finalizer(),  CHECK_0);
                                            |                       |
                                            |                       |-- initialize_class(vmSymbols::java_lang_Compiler(), CHECK_0);
                                            |
                                            |-- LoadMainClass()
                                            |     |
                                            |     |-- (*env)->GetStaticMethodID(env, cls, "checkAndLoadMain", "(ZILjava/lang/String;)Ljava/lang/Class;")
                                            |           |
                                            |           |-- jni_GetStaticMethodID() jni.cpp
                                            |
                                            |-- (*env)->GetStaticMethodID(env, mainClass, "main", "([Ljava/lang/String;)V");
                                            |
                                            |-- (*env)->CallStaticVoidMethod(env, mainClass, mainID, mainArgs);
                                                  |
                                                  |-- jni_invoke_static()
                                                        |
                                                        |-- JavaCalls::call(result, method, &java_args, CHECK);




Reference

1. Flowchart of launcher execs and options processing on unix
http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/4fa603c72f2f/src/solaris/bin/java_md_solinux.c#l77

2. HotSpot JVM 的启动过程做了什么？
https://www.zhihu.com/question/32247563

3. JVM-系统初始化
http://blog.csdn.net/dviewer/article/details/77972338
系统初始化入口是JNI_CreateJavaVM函数，位于/hotspot/src/share/vm/prims/jni.cpp中，hotspot代码中的prims模块里面定义的就是一些外部接口，供JDK或者其他应用程序调用。为了加深印象，我们先复习下JNI_CreateJavaVM函数是怎么来的。入口main函数中创建了运行JavaMain的主线程，在主线程中会调用InitializeJVM来对虚拟机进行初始化，InitializeJVM中通过InvocationFunctions结构体中的函数指针来调用CreateJavaVM，这个CreateJavaVM是通过dlsym(libjvm, "JNI_CreateJavaVM")获取到的。

4. JVM启动分析
http://www.txazo.com/jvm/jvm-startup.html
通过openjdk的源码来分析jvm的启动过程，针对linux系统。

jvm的启动入口main():
JLI_Launch()方法:
InitLauncher()方法:
JLI_SetTraceLauncher()方法:

后续会调用JLI_IsTraceLauncher()和JLI_TraceLauncher()方法输出debug信息。
LoadJavaVM()方法:
JVMInit()方法:
ContinueInNewThread()方法: <------------

JavaMain()方法:
InitializeJVM()方法调用前面挂载的CreateJavaVM()方法，也就是JNI_CreateJavaVM()方法。<----------------
sun.launcher.LauncherHelper的checkAndLoadMain()方法检查并加载主类过程:

jvm的启动模式:
jar启动模式: java -jar main.jar
class启动模式: java org.txazo.test.Main
jvm的整体启动流程:

准备工作，包括查找jre、jvm
装载动态链接库
解析jvm参数
启动虚拟机
加载主类，并调用主类的main()方法

5. JVM源码分析之JVM启动流程
https://www.jianshu.com/p/b91258bc08ac

6. Java虚拟机的启动与程序的运行
http://blog.csdn.net/on_1y/article/details/38761549

7. CentOS上编译OpenJDK8源码 以及 在eclipse上调试HotSpot虚拟机源码
http://blog.csdn.net/tjiyu/article/details/53725247
cd openjdk  
bash ./configure --with-target-bits=64 --with-boot-jdk=/usr/java/jdk1.7.0_80/ --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FILES=0  
make all ZIP_DEBUGINFO_FILES=0  

注意，如果不能进入断点
  出现以下类似信息：
  Missing separate debuginfo for /root/openjdk/build/linux-x86_64-normal-server-slowdebug/jdk/lib/amd64/server/libjvm.so
  因为前面configure没指定"--enable-debug-symbols ZIP_DEBUGINFO_FILES=0"没生成调试的符号信息，或生成后被压缩为"libjvm.diz"了，所有无法找到；
  可以去到"libjvm.so"所在目录，然后解压：unzip libjvm.diz                
  解压出来：libjvm.debuginfo

8. stubGenerator_x86_64.cpp
http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/c1374141598c/src/cpu/x86/vm/stubGenerator_x86_64.cpp